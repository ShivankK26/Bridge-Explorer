import { ExecutionResponse, GetStatusResponse, ResultsResponse, QueryParameter, ExecutionResponseCSV, LatestResultsResponse, ExecutionParams, GetResultParams } from "../types";
import { Router } from "./router";
/**
 * This class implements all the routes defined in the Dune API Docs:
 * https://docs.dune.com/api-reference/executions/execution-object
 */
export declare class ExecutionAPI extends Router {
    /**
     * Executes query by ID according to:
     * https://docs.dune.com/api-reference/executions/endpoint/execute-query
     * @param {number} queryID id of query to be executed.
     * @param {ExecutionParams} params including query parameters and execution performance.
     * @returns {ExecutionResponse} response containing execution ID and state.
     */
    executeQuery(queryID: number, params?: ExecutionParams): Promise<ExecutionResponse>;
    /**
     * Cancels an execution according to:
     * https://docs.dune.com/api-reference/executions/endpoint/cancel-execution
     * @param {string} executionId string representig ID of query execution.
     * @returns {boolean} indicating if success of cancellation request.
     */
    cancelExecution(executionId: string): Promise<boolean>;
    /**
     * Retrieve the status of a query execution by executionID:
     * https://docs.dune.com/api-reference/executions/endpoint/get-execution-status
     * @param {string} executionId string representig ID of query execution.
     * @returns {GetStatusResponse} status of query execution.
     */
    getExecutionStatus(executionId: string): Promise<GetStatusResponse>;
    /**
     * Retrieve results of a query execution by executionID:
     * https://docs.dune.com/api-reference/executions/endpoint/get-execution-result
     * @param {string} executionId string representig ID of query execution
     * @param {GetResultParams} params including limit, offset
     * @returns {ResultsResponse} response containing execution results.
     */
    getExecutionResults(executionId: string, params?: GetResultParams): Promise<ResultsResponse>;
    /**
     * Retrieve results of a query execution (in CSV format) by executionID:
     * https://docs.dune.com/api-reference/executions/endpoint/get-execution-result-csv
     * @param {string} executionId string representig ID of query execution.
     * @param {GetResultParams} params including limit, offset
     * @returns {ExecutionResponseCSV} execution results as CSV.
     */
    getResultCSV(executionId: string, params?: GetResultParams): Promise<ExecutionResponseCSV>;
    /**
     * Retrieves results from query's last execution
     * @param {number} queryID id of query to get results for.
     * @param {GetResultParams} params parameters for retrieval.
     * @param {number} expiryAgeHours  What is considered to be an expired result set.
     * @returns {LatestResultsResponse} response containing execution results and boolean field
     */
    getLastExecutionResults(queryId: number, params?: GetResultParams, expiryAgeHours?: number): Promise<LatestResultsResponse>;
    /**
     * Retrieves results from query's last execution (in CSV format)
     * @param {number} queryID id of query to get results for.
     * @param {GetResultParams} params parameters for retrieval.
     * @returns {ExecutionResponseCSV} execution results as CSV.
     */
    getLastResultCSV(queryId: number, params?: GetResultParams): Promise<ExecutionResponseCSV>;
    /**
     * Private method used for building CSV responses.
     */
    private buildCSVResponse;
    /**
     * Private method used for retrieving entire result via pagination.
     */
    private _fetchEntireResult;
    /**
     * Private method used for retrieving entire result CSV via pagination.
     */
    private _fetchEntireResultCSV;
    /**
     * @deprecated since version 0.0.2 Use executeQuery
     */
    execute(queryID: number, parameters?: QueryParameter[]): Promise<ExecutionResponse>;
    /**
     * @deprecated since version 0.0.2 Use getExecutionStatus
     */
    getStatus(jobID: string): Promise<GetStatusResponse>;
    /**
     * @deprecated since version 0.0.2 Use getExecutionResults
     */
    getResult(jobID: string): Promise<ResultsResponse>;
}

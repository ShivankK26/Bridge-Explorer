import { ResultsResponse, QueryParameter, GetStatusResponse, ExecutionResponseCSV, ExecutionParams, RunQueryArgs, RunSqlArgs } from "../types";
import { ExecutionAPI } from "./execution";
import { QueryAPI } from "./query";
import { TableAPI } from "./table";
import { CustomAPI } from "./custom";
/**
 * The primary interface for devs to utilize
 * full functionality of the Dune API.
 */
export declare class DuneClient {
    exec: ExecutionAPI;
    query: QueryAPI;
    table: TableAPI;
    custom: CustomAPI;
    constructor(apiKey: string);
    /**
     * Runs an existing query by ID via execute, await, return results.
     *
     * @param {RunQueryArgs} args
     * @returns Execution Results
     */
    runQuery(args: RunQueryArgs): Promise<ResultsResponse>;
    /**
     * Runs an existing query by ID via execute, await, return Result CSV.
     *
     * @param {RunQueryArgs} args
     * @returns Execution Results as CSV
     */
    runQueryCSV(args: RunQueryArgs): Promise<ExecutionResponseCSV>;
    /**
     * Goes a bit beyond the internal call which returns that last execution results.
     * Here contains additional logic to refresh the results if they are too old.
     *
     * @param {RunQueryArgs} args
     * @returns Latest execution results for the given parameters.
     */
    getLatestResult(args: RunQueryArgs): Promise<ResultsResponse>;
    /**
     * Get the lastest execution results in CSV format and saves to disk.
     *
     * @param {RunQueryArgs} args
     * @param outFile - location to save CSV.
     */
    downloadCSV(args: RunQueryArgs, outFile: string): Promise<void>;
    /**
     * Allows user to provide execute raw_sql via the CRUD interface
     * - create, run, get results with optional archive/delete.
     * - Query is by default made private and archived after execution.
     * Requires Plus subscription!
     *
     * @returns {Promise<ResultsResponse>}
     */
    runSql(args: RunSqlArgs): Promise<ResultsResponse>;
    /**
     * Executes query with provided parameters, checking every `pingFrequency`
     * seconds until execution status reaches a terminal state.
     * @param queryId
     * @param params
     * @param pingFrequency
     * @returns
     */
    refreshResults(queryId: number, params?: ExecutionParams, pingFrequency?: number): Promise<GetStatusResponse>;
    /**
     * @deprecated since version 0.0.2 Use runQuery
     */
    refresh(queryID: number, parameters?: QueryParameter[], pingFrequency?: number): Promise<ResultsResponse>;
}

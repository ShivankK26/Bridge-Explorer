"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExecutionAPI = void 0;
const types_1 = require("../types");
const loglevel_1 = __importDefault(require("loglevel"));
const utils_1 = require("../utils");
const router_1 = require("./router");
const constants_1 = require("../constants");
/**
 * This class implements all the routes defined in the Dune API Docs:
 * https://docs.dune.com/api-reference/executions/execution-object
 */
class ExecutionAPI extends router_1.Router {
    /**
     * Executes query by ID according to:
     * https://docs.dune.com/api-reference/executions/endpoint/execute-query
     * @param {number} queryID id of query to be executed.
     * @param {ExecutionParams} params including query parameters and execution performance.
     * @returns {ExecutionResponse} response containing execution ID and state.
     */
    async executeQuery(queryID, params = {}) {
        // Extract possible ExecutionParams
        const { query_parameters = [], performance = types_1.QueryEngine.Medium } = params;
        const response = await this.post(`query/${queryID}/execute`, {
            query_parameters,
            performance,
        });
        loglevel_1.default.debug(utils_1.logPrefix, `execute response ${JSON.stringify(response)}`);
        return response;
    }
    /**
     * Cancels an execution according to:
     * https://docs.dune.com/api-reference/executions/endpoint/cancel-execution
     * @param {string} executionId string representig ID of query execution.
     * @returns {boolean} indicating if success of cancellation request.
     */
    async cancelExecution(executionId) {
        const { success } = await this.post(`execution/${executionId}/cancel`);
        return success;
    }
    /**
     * Retrieve the status of a query execution by executionID:
     * https://docs.dune.com/api-reference/executions/endpoint/get-execution-status
     * @param {string} executionId string representig ID of query execution.
     * @returns {GetStatusResponse} status of query execution.
     */
    async getExecutionStatus(executionId) {
        const response = await this._get(`execution/${executionId}/status`);
        loglevel_1.default.debug(utils_1.logPrefix, `get_status response ${JSON.stringify(response)}`);
        return response;
    }
    /**
     * Retrieve results of a query execution by executionID:
     * https://docs.dune.com/api-reference/executions/endpoint/get-execution-result
     * @param {string} executionId string representig ID of query execution
     * @param {GetResultParams} params including limit, offset
     * @returns {ResultsResponse} response containing execution results.
     */
    async getExecutionResults(executionId, params = constants_1.DEFAULT_GET_PARAMS) {
        const response = await this._get(`execution/${executionId}/results`, (0, types_1.validateAndBuildGetResultParams)(params));
        loglevel_1.default.debug(utils_1.logPrefix, `get_result response ${JSON.stringify(response)}`);
        return response;
    }
    /**
     * Retrieve results of a query execution (in CSV format) by executionID:
     * https://docs.dune.com/api-reference/executions/endpoint/get-execution-result-csv
     * @param {string} executionId string representig ID of query execution.
     * @param {GetResultParams} params including limit, offset
     * @returns {ExecutionResponseCSV} execution results as CSV.
     */
    async getResultCSV(executionId, params = constants_1.DEFAULT_GET_PARAMS) {
        const response = await this._get(`execution/${executionId}/results/csv`, (0, types_1.validateAndBuildGetResultParams)(params), true);
        loglevel_1.default.debug(utils_1.logPrefix, `get_result response ${JSON.stringify(response)}`);
        return this.buildCSVResponse(response);
    }
    /**
     * Retrieves results from query's last execution
     * @param {number} queryID id of query to get results for.
     * @param {GetResultParams} params parameters for retrieval.
     * @param {number} expiryAgeHours  What is considered to be an expired result set.
     * @returns {LatestResultsResponse} response containing execution results and boolean field
     */
    async getLastExecutionResults(queryId, params = constants_1.DEFAULT_GET_PARAMS, 
    /// What is considered to be an expired result set.
    expiryAgeHours = constants_1.THREE_MONTHS_IN_HOURS) {
        // The first bit might only return a page.
        const results = await this._get(`query/${queryId}/results`, (0, types_1.validateAndBuildGetResultParams)(params));
        const lastRun = results.execution_ended_at;
        const maxAge = expiryAgeHours;
        const isExpired = lastRun !== undefined && (0, utils_1.ageInHours)(lastRun) > maxAge;
        return { results: await this._fetchEntireResult(results), isExpired };
    }
    /**
     * Retrieves results from query's last execution (in CSV format)
     * @param {number} queryID id of query to get results for.
     * @param {GetResultParams} params parameters for retrieval.
     * @returns {ExecutionResponseCSV} execution results as CSV.
     */
    async getLastResultCSV(queryId, params = constants_1.DEFAULT_GET_PARAMS) {
        const response = await this._get(`query/${queryId}/results/csv`, (0, types_1.validateAndBuildGetResultParams)(params), true);
        return this._fetchEntireResultCSV(await this.buildCSVResponse(response));
    }
    /**
     * Private method used for building CSV responses.
     */
    async buildCSVResponse(response) {
        const nextOffset = response.headers.get(constants_1.DUNE_CSV_NEXT_OFFSET_HEADER);
        return {
            data: await response.text(),
            next_uri: response.headers.get(constants_1.DUNE_CSV_NEXT_URI_HEADER),
            next_offset: nextOffset ? parseInt(nextOffset) : undefined,
        };
    }
    /**
     * Private method used for retrieving entire result via pagination.
     */
    async _fetchEntireResult(results) {
        let next_uri = results.next_uri;
        let batch;
        while (next_uri !== undefined) {
            batch = await this._getByUrl(next_uri);
            results = (0, types_1.concatResultResponse)(results, batch);
            next_uri = batch.next_uri;
        }
        return results;
    }
    /**
     * Private method used for retrieving entire result CSV via pagination.
     */
    async _fetchEntireResultCSV(results) {
        let next_uri = results.next_uri;
        let batch;
        while (next_uri !== null) {
            batch = await this.buildCSVResponse(await this._getByUrl(next_uri, undefined, true));
            results = (0, types_1.concatResultCSV)(results, batch);
            next_uri = batch.next_uri;
        }
        return results;
    }
    /**
     * @deprecated since version 0.0.2 Use executeQuery
     */
    async execute(queryID, parameters) {
        return this.executeQuery(queryID, { query_parameters: parameters });
    }
    /**
     * @deprecated since version 0.0.2 Use getExecutionStatus
     */
    async getStatus(jobID) {
        return this.getExecutionStatus(jobID);
    }
    /**
     * @deprecated since version 0.0.2 Use getExecutionResults
     */
    async getResult(jobID) {
        return this.getExecutionResults(jobID);
    }
}
exports.ExecutionAPI = ExecutionAPI;

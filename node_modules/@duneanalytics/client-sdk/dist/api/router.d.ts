import { ContentType, RequestPayload } from "../types";
declare enum RequestMethod {
    GET = "GET",
    POST = "POST",
    PATCH = "PATCH",
    DELETE = "DELETE"
}
/**
 * This class implements all the routes defined in the Dune API Docs:
 * https://docs.dune.com/api-reference/overview/introduction
 */
export declare class Router {
    private apiKey;
    private apiVersion;
    constructor(apiKey: string, apiVersion?: string);
    /**
     * Allows a post to any route supported by DuneAPI.
     * Meant to be low level call only used by available functions,
     * but accessible if new routes become available before the SDK catches up.
     * @param route request path of the http post
     * @param params payload sent with request (should be aligned with what the interface supports)
     * @returns a flexible data type representing whatever is expected to be returned from the request.
     */
    post<T>(route: string, params?: RequestPayload, content_type?: ContentType): Promise<T>;
    protected _handleResponse<T>(responsePromise: Promise<Response>): Promise<T>;
    protected _request<T>(method: RequestMethod, url: string, payload?: RequestPayload, raw?: boolean, content_type?: ContentType): Promise<T>;
    protected _get<T>(route: string, params?: RequestPayload, raw?: boolean): Promise<T>;
    protected _delete<T>(route: string): Promise<T>;
    protected _getByUrl<T>(url: string, params?: RequestPayload, raw?: boolean): Promise<T>;
    protected _patch<T>(route: string, params?: RequestPayload): Promise<T>;
    url(route?: string): string;
}
export {};

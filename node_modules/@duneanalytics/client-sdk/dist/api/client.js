"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DuneClient = void 0;
/**
 * This is the common entry point for end users.
 * A class with exhibits all Dune API properties and extensions.
 * Specifically, this class is a composition of QueryAPI, ExecutionAPI
 * and also contains implementations of runQuery[CSV], getLatestResults[CSV]
 */
const fs = __importStar(require("fs/promises"));
const types_1 = require("../types");
const utils_1 = require("../utils");
const loglevel_1 = __importDefault(require("loglevel"));
const utils_2 = require("../utils");
const execution_1 = require("./execution");
const constants_1 = require("../constants");
const query_1 = require("./query");
const table_1 = require("./table");
const custom_1 = require("./custom");
/// Various states of query execution that are "terminal".
const TERMINAL_STATES = [
    types_1.ExecutionState.CANCELLED,
    types_1.ExecutionState.COMPLETED,
    types_1.ExecutionState.FAILED,
    types_1.ExecutionState.EXPIRED,
];
/**
 * The primary interface for devs to utilize
 * full functionality of the Dune API.
 */
class DuneClient {
    constructor(apiKey) {
        this.exec = new execution_1.ExecutionAPI(apiKey);
        this.query = new query_1.QueryAPI(apiKey);
        this.table = new table_1.TableAPI(apiKey);
        this.custom = new custom_1.CustomAPI(apiKey);
    }
    /**
     * Runs an existing query by ID via execute, await, return results.
     *
     * @param {RunQueryArgs} args
     * @returns Execution Results
     */
    async runQuery(args) {
        const { queryId, opts } = args;
        args.limit = (opts === null || opts === void 0 ? void 0 : opts.batchSize) || args.limit;
        const { state, execution_id } = await this.refreshResults(queryId, args, opts === null || opts === void 0 ? void 0 : opts.pingFrequency);
        if (state === types_1.ExecutionState.COMPLETED) {
            const result = await this.getLatestResult(args);
            if (result.execution_id !== execution_id) {
                throw new types_1.DuneError(`invalid execution ID: expected ${execution_id}, got ${result.execution_id}`);
            }
            return result;
        }
        else {
            const message = `refresh (execution ${execution_id}) yields incomplete terminal state ${state}`;
            // TODO - log the error in constructor
            loglevel_1.default.error(utils_2.logPrefix, message);
            throw new types_1.DuneError(message);
        }
    }
    /**
     * Runs an existing query by ID via execute, await, return Result CSV.
     *
     * @param {RunQueryArgs} args
     * @returns Execution Results as CSV
     */
    async runQueryCSV(args) {
        const { queryId, opts } = args;
        args.limit = (opts === null || opts === void 0 ? void 0 : opts.batchSize) || args.limit;
        const { state, execution_id } = await this.refreshResults(queryId, args, opts === null || opts === void 0 ? void 0 : opts.pingFrequency);
        if (state === types_1.ExecutionState.COMPLETED) {
            // we can't assert that the execution ids agree here!
            return this.exec.getLastResultCSV(queryId, args);
        }
        else {
            const message = `refresh (execution ${execution_id}) yields incomplete terminal state ${state}`;
            // TODO - log the error in constructor
            loglevel_1.default.error(utils_2.logPrefix, message);
            throw new types_1.DuneError(message);
        }
    }
    /**
     * Goes a bit beyond the internal call which returns that last execution results.
     * Here contains additional logic to refresh the results if they are too old.
     *
     * @param {RunQueryArgs} args
     * @returns Latest execution results for the given parameters.
     */
    async getLatestResult(args) {
        const { queryId, opts } = args;
        args.limit = (opts === null || opts === void 0 ? void 0 : opts.batchSize) || args.limit;
        const lastestResults = await this.exec.getLastExecutionResults(queryId, args, opts === null || opts === void 0 ? void 0 : opts.maxAgeHours);
        let results;
        if (lastestResults.isExpired) {
            loglevel_1.default.info(utils_2.logPrefix, `results expired, re-running query.`);
            results = await this.runQuery(args);
        }
        else {
            results = lastestResults.results;
        }
        return results;
    }
    /**
     * Get the lastest execution results in CSV format and saves to disk.
     *
     * @param {RunQueryArgs} args
     * @param outFile - location to save CSV.
     */
    async downloadCSV(args, outFile) {
        var _a;
        const { queryId, opts } = args;
        args.limit = (opts === null || opts === void 0 ? void 0 : opts.batchSize) || args.limit;
        const { isExpired } = await this.exec.getLastExecutionResults(queryId, args, (_a = args.opts) === null || _a === void 0 ? void 0 : _a.maxAgeHours);
        let results;
        if (isExpired) {
            results = this.runQueryCSV(args);
        }
        else {
            // TODO (user cost savings): transform the lastResults into CSV instead of refetching
            results = this.exec.getLastResultCSV(args.queryId, args);
        }
        // Wait for the results promise to resolve and then write the CSV data to the specified outFile
        const csvData = (await results).data;
        await fs.writeFile(outFile, csvData, "utf8");
        loglevel_1.default.info(`CSV data has been saved to ${outFile}`);
    }
    /**
     * Allows user to provide execute raw_sql via the CRUD interface
     * - create, run, get results with optional archive/delete.
     * - Query is by default made private and archived after execution.
     * Requires Plus subscription!
     *
     * @returns {Promise<ResultsResponse>}
     */
    async runSql(args) {
        const { name, query_sql, isPrivate, query_parameters, archiveAfter } = args;
        const queryId = await this.query.createQuery({
            name: name ? name : "API Query",
            query_sql,
            query_parameters,
            is_private: isPrivate,
        });
        let results;
        try {
            results = await this.runQuery({ queryId, ...args });
        }
        finally {
            if (archiveAfter) {
                this.query.archiveQuery(queryId);
            }
        }
        return results;
    }
    /**
     * Executes query with provided parameters, checking every `pingFrequency`
     * seconds until execution status reaches a terminal state.
     * @param queryId
     * @param params
     * @param pingFrequency
     * @returns
     */
    async refreshResults(queryId, params, pingFrequency = constants_1.POLL_FREQUENCY_SECONDS) {
        loglevel_1.default.info(utils_2.logPrefix, `refreshing query https://dune.com/queries/${queryId} with parameters ${JSON.stringify(params)}`);
        const { execution_id } = await this.exec.executeQuery(queryId, params);
        let status = await this.exec.getExecutionStatus(execution_id);
        while (!TERMINAL_STATES.includes(status.state)) {
            loglevel_1.default.info(utils_2.logPrefix, `waiting for query execution ${execution_id} to complete: current state ${status.state}`);
            await (0, utils_1.sleep)(pingFrequency);
            status = await this.exec.getExecutionStatus(execution_id);
        }
        return status;
    }
    /**
     * @deprecated since version 0.0.2 Use runQuery
     */
    async refresh(queryID, parameters = [], pingFrequency) {
        return this.runQuery({
            queryId: queryID,
            query_parameters: parameters,
            opts: { pingFrequency },
        });
    }
}
exports.DuneClient = DuneClient;

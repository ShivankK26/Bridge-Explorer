import { Router } from "./router";
import { DuneQuery, CreateQueryParams, UpdateQueryParams } from "../types";
/**
 * Query Management Interface (CRUD operations)
 * https://docs.dune.com/api-reference/queries/endpoint/query-object
 */
export declare class QueryAPI extends Router {
    /**
     * Create a query. The owner of the query will be under the context of the API key.
     * https://docs.dune.com/api-reference/queries/endpoint/create
     * @param {CreateQueryParams} params of query creation.
     * @returns {number} the ID of the created query.
     */
    createQuery(params: CreateQueryParams): Promise<number>;
    /**
     * Read the sql text, parameters, name, tags, and state of a query.
     * For private queries, only the API key generated under the context
     * of the owner of that query will work:
     * https://dune.com/docs/api/api-referenhttps://docs.dune.com/api-reference/queries/endpoint/read
     * @param {number} queryId - the ID of the query to be read.
     * @returns {DuneQuery} all known data regarding the query with given ID.
     */
    readQuery(queryId: number): Promise<DuneQuery>;
    /**
     * Update the sql text, parameters, name, tags, and state of a query.
     * Only the API key generated under the context of the owner of that
     * query will work.
     * https://docs.dune.com/api-reference/queries/endpoint/update
     * @param {number} queryId - the ID of the query to be updated.
     * @param {UpdateQueryParams} - changes to be made to the query.
     * @returns {number} updated query Id
     */
    updateQuery(queryId: number, params: UpdateQueryParams): Promise<number>;
    /**
     * Archive a query. Only the API key generated under the context of
     * the owner of that query will work. This does not delete the query,
     * but will make it uneditable/unexecutable:
     * https://docs.dune.com/api-reference/queries/endpoint/archive
     * @param {number} queryId ID of the query to be archived.
     * @returns {boolean} indicating success of request.
     */
    archiveQuery(queryId: number): Promise<boolean>;
    /**
     * Unarchive a query. Only the API key generated under the context of
     * the owner of that query will work.
     * https://docs.dune.com/api-reference/queries/endpoint/unarchive
     * @param {number} queryId ID of the query to be unarchived.
     * @returns {boolean} indicating success of request.
     */
    unarchiveQuery(queryId: number): Promise<boolean>;
    /**
     * Make a query private. Only the API key generated under the context of
     * the owner of that query will work.
     * https://docs.dune.com/api-reference/queries/endpoint/private
     * @param {number} queryId - ID of the query to be made private.
     * @returns {number} ID of the query made private.
     */
    makePrivate(queryId: number): Promise<number>;
    /**
     * Make a private query public.
     * https://docs.dune.com/api-reference/queries/endpoint/unprivate
     * @param {number} queryId - ID of the query to be made public.
     * @returns {number} ID of the query made public.
     */
    makePublic(queryId: number): Promise<number>;
}

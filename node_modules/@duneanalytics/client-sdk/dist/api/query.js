"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryAPI = void 0;
const router_1 = require("./router");
const types_1 = require("../types");
const loglevel_1 = __importDefault(require("loglevel"));
/**
 * Query Management Interface (CRUD operations)
 * https://docs.dune.com/api-reference/queries/endpoint/query-object
 */
class QueryAPI extends router_1.Router {
    /**
     * Create a query. The owner of the query will be under the context of the API key.
     * https://docs.dune.com/api-reference/queries/endpoint/create
     * @param {CreateQueryParams} params of query creation.
     * @returns {number} the ID of the created query.
     */
    async createQuery(params) {
        if (params.is_private === undefined) {
            params.is_private = false;
        }
        params.query_parameters = params.query_parameters ? params.query_parameters : [];
        const responseJson = await this.post("query/", params);
        return responseJson.query_id;
    }
    /**
     * Read the sql text, parameters, name, tags, and state of a query.
     * For private queries, only the API key generated under the context
     * of the owner of that query will work:
     * https://dune.com/docs/api/api-referenhttps://docs.dune.com/api-reference/queries/endpoint/read
     * @param {number} queryId - the ID of the query to be read.
     * @returns {DuneQuery} all known data regarding the query with given ID.
     */
    async readQuery(queryId) {
        const responseJson = await this._get(`query/${queryId}`);
        return responseJson;
    }
    /**
     * Update the sql text, parameters, name, tags, and state of a query.
     * Only the API key generated under the context of the owner of that
     * query will work.
     * https://docs.dune.com/api-reference/queries/endpoint/update
     * @param {number} queryId - the ID of the query to be updated.
     * @param {UpdateQueryParams} - changes to be made to the query.
     * @returns {number} updated query Id
     */
    async updateQuery(queryId, params) {
        if (Object.keys(params).length === 0) {
            loglevel_1.default.warn("updateQuery: called with no proposed changes.");
            return queryId;
        }
        const responseJson = await this._patch(`query/${queryId}`, params);
        return responseJson.query_id;
    }
    /**
     * Archive a query. Only the API key generated under the context of
     * the owner of that query will work. This does not delete the query,
     * but will make it uneditable/unexecutable:
     * https://docs.dune.com/api-reference/queries/endpoint/archive
     * @param {number} queryId ID of the query to be archived.
     * @returns {boolean} indicating success of request.
     */
    async archiveQuery(queryId) {
        const response = await this.post(`query/${queryId}/archive`);
        const query = await this.readQuery(response.query_id);
        return query.is_archived;
    }
    /**
     * Unarchive a query. Only the API key generated under the context of
     * the owner of that query will work.
     * https://docs.dune.com/api-reference/queries/endpoint/unarchive
     * @param {number} queryId ID of the query to be unarchived.
     * @returns {boolean} indicating success of request.
     */
    async unarchiveQuery(queryId) {
        const response = await this.post(`query/${queryId}/unarchive`);
        const query = await this.readQuery(response.query_id);
        return query.is_archived;
    }
    /**
     * Make a query private. Only the API key generated under the context of
     * the owner of that query will work.
     * https://docs.dune.com/api-reference/queries/endpoint/private
     * @param {number} queryId - ID of the query to be made private.
     * @returns {number} ID of the query made private.
     */
    async makePrivate(queryId) {
        const response = await this.post(`query/${queryId}/private`);
        const query = await this.readQuery(response.query_id);
        if (!query.is_private) {
            throw new types_1.DuneError("Query was not made private!");
        }
        return response.query_id;
    }
    /**
     * Make a private query public.
     * https://docs.dune.com/api-reference/queries/endpoint/unprivate
     * @param {number} queryId - ID of the query to be made public.
     * @returns {number} ID of the query made public.
     */
    async makePublic(queryId) {
        const response = await this.post(`query/${queryId}/unprivate`);
        const query = await this.readQuery(response.query_id);
        if (query.is_private) {
            throw new types_1.DuneError("Query is still private.");
        }
        return response.query_id;
    }
}
exports.QueryAPI = QueryAPI;

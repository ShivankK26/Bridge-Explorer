"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TableAPI = void 0;
const router_1 = require("./router");
const types_1 = require("../types");
const utils_1 = require("../utils");
/**
 * Table Management Interface (includes uploadCSV)
 * https://docs.dune.com/api-reference/tables/
 */
class TableAPI extends router_1.Router {
    /**
     * Allows for anyone to upload a CSV as a table in Dune.
     * The size limit per upload is currently 200MB.
     * Storage is limited by plan, 1MB on free, 15GB on plus, and 50GB on premium.
     *
     * @param args UploadCSVParams relevant fields related to dataset upload.
     * @returns boolean representing if upload was successful.
     */
    async uploadCsv(args) {
        const response = await this.post("table/upload/csv", args);
        try {
            return Boolean(response.success);
        }
        catch (err) {
            throw new types_1.DuneError(`UploadCsvResponse ${JSON.stringify(response)}`);
        }
    }
    /**
     * https://docs.dune.com/api-reference/tables/endpoint/create
     * The create table endpoint allows you to create an empty table
     * with a specific schema in Dune.
     *
     * The only limitations are:
     * - If a table already exists with the same name, the request will fail.
     * - Column names in the table canâ€™t start with a special character or a digit.
     * @param args
     */
    async create(args) {
        return this.post("table/create", (0, utils_1.withDefaults)(args, { description: "", is_private: false }));
    }
    /**
     * https://docs.dune.com/api-reference/tables/endpoint/delete
     * Delete a Dune table with the specified name and namespace.
     *
     * To be able to delete a table, it must have been created with the /create endpoint.
     */
    async delete(args) {
        const route = `table/${args.namespace}/${args.table_name}`;
        return this._delete(route);
    }
    /**
     * https://docs.dune.com/api-reference/tables/endpoint/insert
     * The insert table endpoint allows you to insert data into an existing table in Dune.
     * The only limitations are:
     * - The file has to be in json or csv format
     * - The file has to have the same schema as the table
     * @param args
     * @returns
     */
    async insert(args) {
        return this.post(`table/${args.namespace}/${args.table_name}/insert`, args.data, args.content_type);
    }
}
exports.TableAPI = TableAPI;

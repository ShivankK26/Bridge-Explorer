export declare enum ExecutionState {
    COMPLETED = "QUERY_STATE_COMPLETED",
    EXECUTING = "QUERY_STATE_EXECUTING",
    PENDING = "QUERY_STATE_PENDING",
    CANCELLED = "QUERY_STATE_CANCELLED",
    FAILED = "QUERY_STATE_FAILED",
    EXPIRED = "QUERY_STATE_EXPIRED"
}
export interface ExecutionResponseCSV {
    data: string;
    next_uri: string | null;
    next_offset?: number;
}
export declare function concatResultCSV(left: ExecutionResponseCSV, right: ExecutionResponseCSV): ExecutionResponseCSV;
export interface ExecutionResponse {
    execution_id: string;
    state: ExecutionState;
}
export interface CreateQueryResponse {
    query_id: number;
}
export type SuccessResponse = {
    success: boolean;
};
export interface TimeData {
    submitted_at: Date;
    execution_started_at?: Date;
    execution_ended_at?: Date;
    expires_at?: Date;
    cancelled_at?: Date;
}
export interface ResultMetadata {
    column_names: string[];
    datapoint_count: number;
    execution_time_millis: number;
    pending_time_millis: number;
    result_set_bytes: number;
    row_count: number;
    total_result_set_bytes: number;
    total_row_count: number;
}
interface BaseStatusResponse extends TimeData {
    execution_id: string;
    query_id: number;
    queue_position?: number;
}
interface IncompleteStatusResponse extends BaseStatusResponse {
    state: Exclude<ExecutionState, ExecutionState.COMPLETED>;
}
interface CompleteStatusResponse extends BaseStatusResponse {
    state: ExecutionState.COMPLETED;
    result_metadata: ResultMetadata;
}
export type GetStatusResponse = IncompleteStatusResponse | CompleteStatusResponse;
export interface ExecutionResult {
    rows: Record<string, unknown>[];
    metadata: ResultMetadata;
}
export interface ResultsResponse extends TimeData {
    execution_id: string;
    query_id: number;
    is_execution_finished: boolean;
    next_offset: number;
    next_uri: string;
    state: ExecutionState;
    result?: ExecutionResult;
}
export interface LatestResultsResponse {
    results: ResultsResponse;
    isExpired?: boolean;
}
export declare function concatResultResponse(left: ResultsResponse, right: ResultsResponse): ResultsResponse;
export interface DeleteTableResult {
    message: string;
}
export interface CreateTableResult {
    example_query: string;
    full_name: string;
    namespace: string;
    table_name: string;
}
export interface InsertTableResult {
    rows_written: number;
}
export {};

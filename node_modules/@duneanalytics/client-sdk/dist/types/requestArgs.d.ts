/// <reference types="node" />
import { QueryParameter } from "./queryParameter";
export interface ExecutionParams {
    query_parameters?: QueryParameter[];
    performance?: QueryEngine;
}
export declare enum QueryEngine {
    Medium = "medium",
    Large = "large"
}
export type UploadCSVArgs = {
    table_name: string;
    data: string;
    description?: string;
    is_private?: boolean;
};
export type RequestPayload = GetResultParams | ExecuteQueryParams | UpdateQueryParams | CreateQueryParams | UploadCSVArgs | CreateTableArgs | InsertTableArgs | Buffer;
export declare function payloadJSON(payload?: RequestPayload): string;
/**
 * Converts all arguments into a format
 * which can be converted into a URL path for GET requests.
 */
export declare function payloadSearchParams(payload?: RequestPayload): Record<string, any>;
interface BaseParams {
    query_parameters?: QueryParameter[];
}
export interface GetResultParams extends BaseParams {
    limit?: number;
    offset?: number;
    sample_count?: number;
    filters?: string;
    sort_by?: string[] | string;
    columns?: string[] | string;
}
/**
 * Custom API parameters for creating and managing custom endpoints.
 * Extends GetResultParams but omits 'query_parameters'.
 *
 * @extends {Omit<GetResultParams, "query_parameters">}
 */
export interface CustomAPIParams extends Omit<GetResultParams, "query_parameters"> {
    /**
     * The team or user handle owning the custom endpoint.
     */
    handle: string;
    /**
     * Custom endpoint slug.
     */
    slug: string;
}
export declare function validateAndBuildGetResultParams({ limit, offset, sample_count, filters, sort_by, columns, query_parameters, }: GetResultParams): GetResultParams;
export interface ExecuteQueryParams extends BaseParams {
    performance: QueryEngine;
}
export interface BaseCRUDParams extends BaseParams {
    description?: string;
    name?: string;
    query_sql: string;
}
export interface UpdateQueryParams extends BaseCRUDParams {
    tags?: string[];
}
export interface CreateQueryParams extends BaseCRUDParams {
    is_private?: boolean;
}
export declare enum ColumnType {
    Varchar = "varchar",
    Integer = "integer",
    Double = "double",
    Boolean = "boolean",
    Timestamp = "timestamp"
}
export interface SchemaRecord {
    name: string;
    type: ColumnType;
}
export interface DeleteTableArgs {
    namespace: string;
    table_name: string;
}
export interface CreateTableArgs {
    description?: string;
    is_private?: boolean;
    namespace: string;
    schema: SchemaRecord[];
    table_name: string;
}
/**
 * All supported API content types
 */
export declare enum ContentType {
    Json = "application/json",
    Csv = "text/csv",
    NDJson = "application/x-ndjson"
}
export interface InsertTableArgs {
    namespace: string;
    table_name: string;
    data: Buffer;
    content_type: ContentType;
}
export interface Options {
    batchSize?: number;
    pingFrequency?: number;
    maxAgeHours?: number;
}
export interface RunQueryArgs extends GetResultParams, ExecutionParams {
    queryId: number;
    opts?: Options;
}
export interface LatestResultArgs {
    queryId: number;
    parameters?: QueryParameter[];
    opts?: Options;
}
export interface RunSqlArgs extends ExecutionParams {
    query_sql: string;
    name?: string;
    isPrivate?: boolean;
    archiveAfter?: boolean;
    opts?: Options;
}
export {};

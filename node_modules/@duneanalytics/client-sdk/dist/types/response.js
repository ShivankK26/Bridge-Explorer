"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.concatResultResponse = exports.concatResultCSV = exports.ExecutionState = void 0;
/// Various possible states of a query exeuction.
var ExecutionState;
(function (ExecutionState) {
    ExecutionState["COMPLETED"] = "QUERY_STATE_COMPLETED";
    ExecutionState["EXECUTING"] = "QUERY_STATE_EXECUTING";
    ExecutionState["PENDING"] = "QUERY_STATE_PENDING";
    ExecutionState["CANCELLED"] = "QUERY_STATE_CANCELLED";
    ExecutionState["FAILED"] = "QUERY_STATE_FAILED";
    ExecutionState["EXPIRED"] = "QUERY_STATE_EXPIRED";
})(ExecutionState || (exports.ExecutionState = ExecutionState = {}));
function concatResultCSV(left, right) {
    left.next_uri = right.next_uri;
    left.next_offset = right.next_offset;
    // Trim last newline from the left and split both on newlines.
    const leftData = left.data.trimEnd().split("\n");
    const rightData = right.data.split("\n");
    // Remove the header column from right:
    rightData.shift();
    return {
        next_uri: right.next_uri,
        next_offset: right.next_offset,
        // Concatenate the two arrays and join them back into a single string
        data: leftData.concat(rightData).join("\n"),
    };
}
exports.concatResultCSV = concatResultCSV;
function concatResultResponse(left, right) {
    if (left.execution_id !== right.execution_id) {
        throw new Error(`Can't combine results: ExecutionIds (${left.execution_id} != ${right.execution_id})`);
    }
    else if (left.result === undefined) {
        throw new Error(`Can't combine results: Left Entry has no results`);
    }
    else if (right.result === undefined) {
        throw new Error(`Can't combine results: Right Entry has no results`);
    }
    const { next_offset, next_uri, result: _, ...remainingValues } = right;
    return {
        next_uri,
        next_offset,
        result: concatResult(left.result, right.result),
        ...remainingValues,
    };
}
exports.concatResultResponse = concatResultResponse;
function concatResult(left, right) {
    return {
        rows: [...left.rows, ...right.rows],
        metadata: concatResultMetadata(left.metadata, right.metadata),
    };
}
function concatResultMetadata(left, right) {
    if (right === undefined) {
        throw new Error("Can not concatenate with empty metadata");
    }
    const { row_count, result_set_bytes, datapoint_count, ...remainingValues } = right;
    return {
        row_count: left.row_count + row_count,
        result_set_bytes: left.result_set_bytes + result_set_bytes,
        datapoint_count: left.datapoint_count + datapoint_count,
        ...remainingValues,
    };
}

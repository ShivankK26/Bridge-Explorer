"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryParameter = exports.ParameterType = void 0;
/// All supported Dune Query Parameter types.
var ParameterType;
(function (ParameterType) {
    /// Note that text fields may also be used for varbinary data types.
    ParameterType["TEXT"] = "text";
    ParameterType["NUMBER"] = "number";
    ParameterType["DATE"] = "date";
    ParameterType["ENUM"] = "enum";
})(ParameterType || (exports.ParameterType = ParameterType = {}));
/// Class representing Dune Query Parameters with convience constructor methods for each type.
class QueryParameter {
    constructor(type, name, value) {
        this.type = type;
        this.value = value.toString();
        this.name = name;
    }
    /**
     * Text type parameter constructor
     * @param {string} name of parameter
     * @param {string} value default value
     * @returns {QueryParameter}
     */
    static text(name, value) {
        return new QueryParameter(ParameterType.TEXT, name, value);
    }
    /**
     * Number type parameter constructor
     * @param {string | number} name of parameter
     * @param {string} value default value
     * @returns {QueryParameter}
     */
    static number(name, value) {
        return new QueryParameter(ParameterType.NUMBER, name, value.toString());
    }
    /**
     * Date type parameter constructor
     * @param {string | Date} name of parameter
     * @param {string} value default value
     * @returns {QueryParameter}
     */
    static date(name, value) {
        return new QueryParameter(ParameterType.DATE, name, value.toString());
    }
    /**
     * Enum/List type parameter constructor
     * @param {string} name of parameter
     * @param {string} value default value
     * @returns {QueryParameter}
     */
    static enum(name, value) {
        return new QueryParameter(ParameterType.ENUM, name, value.toString());
    }
    /**
     * Internal method used to convert query parameters into JSON formated request payload.
     * @param params [Optional]: list of query parameters to be "unravelled".
     * @returns JSON formated HTTP request payload.
     */
    static unravel(params) {
        // Transform Query Parameter list into "dict"
        const reducedParams = params === null || params === void 0 ? void 0 : params.reduce((acc, { name, value }) => ({ ...acc, [name]: value }), {});
        return reducedParams || {};
    }
}
exports.QueryParameter = QueryParameter;

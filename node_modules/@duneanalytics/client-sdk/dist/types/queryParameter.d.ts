export declare enum ParameterType {
    TEXT = "text",
    NUMBER = "number",
    DATE = "date",
    ENUM = "enum"
}
export declare class QueryParameter {
    type: ParameterType;
    value: string;
    name: string;
    constructor(type: ParameterType, name: string, value: string);
    /**
     * Text type parameter constructor
     * @param {string} name of parameter
     * @param {string} value default value
     * @returns {QueryParameter}
     */
    static text(name: string, value: string): QueryParameter;
    /**
     * Number type parameter constructor
     * @param {string | number} name of parameter
     * @param {string} value default value
     * @returns {QueryParameter}
     */
    static number(name: string, value: string | number): QueryParameter;
    /**
     * Date type parameter constructor
     * @param {string | Date} name of parameter
     * @param {string} value default value
     * @returns {QueryParameter}
     */
    static date(name: string, value: string | Date): QueryParameter;
    /**
     * Enum/List type parameter constructor
     * @param {string} name of parameter
     * @param {string} value default value
     * @returns {QueryParameter}
     */
    static enum(name: string, value: string): QueryParameter;
    /**
     * Internal method used to convert query parameters into JSON formated request payload.
     * @param params [Optional]: list of query parameters to be "unravelled".
     * @returns JSON formated HTTP request payload.
     */
    static unravel(params?: QueryParameter[]): Record<string, string> | undefined;
}
